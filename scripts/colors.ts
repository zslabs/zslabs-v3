import { promises as fs } from 'fs'

import {
  blackA,
  whiteA,
  blueDark,
  violetDark,
  yellowDark,
  tomatoDark,
  greenDark,
  slateDark,
} from '@radix-ui/colors'
import { createSpinner } from 'nanospinner'

const colors = [
  {
    key: 'overlay',
    value: blackA,
  },
  {
    key: 'overlay-contrast',
    value: whiteA,
  },
  {
    key: 'primary',
    value: blueDark,
  },
  {
    key: 'accent',
    value: violetDark,
  },
  {
    key: 'warning',
    value: yellowDark,
  },
  {
    key: 'danger',
    value: tomatoDark,
  },
  {
    key: 'success',
    value: greenDark,
  },
  {
    key: 'slate',
    value: slateDark,
  },
]

type Colors = typeof colors

function updateKeys(color: Colors[number]['value']) {
  return Object.entries(color).reduce(
    (acc, curr, index) => {
      // eslint-disable-next-line prefer-destructuring
      acc[index + 1] = curr[1]
      return acc
    },
    {} as {
      [key: number]: string
    }
  )
}

const twColors = colors.reduce(
  (acc, curr) => {
    acc[curr.key] = updateKeys(curr.value)

    return acc
  },
  {} as {
    [key: string]: {
      [key: number]: string
    }
  }
)

function writeVars(color: Colors[number]['value']) {
  return Object.entries(color).reduce((acc, curr) => {
    // eslint-disable-next-line no-param-reassign
    acc += `\n  --${curr[0]}: ${curr[1]};`
    return acc
  }, '')
}

// eslint-disable-next-line
;(async () => {
  // Let's kick things off!
  const startTime = performance.now()
  const spinner = createSpinner('Generating colors...').start()

  const vars = colors.map((color) => writeVars(color.value)).join('\n')

  const css = `/* Autogenerated ${new Date().toLocaleString(
    'en-US'
  )} */\n\n:root {${vars}
}`

  await fs.writeFile(`styles/colors.css`, css, 'utf8')

  // Generate colors config
  await fs.writeFile(
    `helpers/tw.json`,
    JSON.stringify(twColors, null, 2),
    'utf8'
  )

  // All done!
  const endTime = performance.now()
  const elapsedTime = (endTime - startTime) / 1000

  spinner.success({
    text: `Colors generated successfully in ${elapsedTime.toFixed(2)} seconds`,
    mark: ':)',
  })
})()
